log4cpp  可以生成动态库 和 静态库  必须根据使用的编译器 编译成对应版本
添加头文件搜索路径
#pragma comment(lib, "log4cpp.lib")

项目加载的库 必须对应 debug版 或 release版，如果debug版加载release的库，则报bad_alloc异常


报错：
log4cpp::BasicLayout::`vector deleting destructor'(unsignedint 1) + 122 bytes
log4cpp::LayoutAppender::~LayoutAppender() line 21 + 35bytes
log4cpp::OstreamAppender::~OstreamAppender() line 28 + 15bytes
log4cpp::OstreamAppender::`vector deletingdestructor'(unsigned int 1) + 103 bytes
log4cpp::Category::removeAllAppenders() line 159 + 39bytes
log4cpp::HierarchyMaintainer::shutdown() line 101 + 27bytes
log4cpp::HierarchyMaintainer::~HierarchyMaintainer() line36
可能需要调整c run time library
DEBUG -> MDd
Release -> MD


Category(种类)负责向日志中写入信息，Appender(附加目的地)负责指定日志的目的地，Layout(布局，格式输出)负责设定日志的格式，Priority(优先级)被用来指定Category的优先级和日志的优先级， NDC(嵌套的诊断上下文，暂时不知什么用)则是一种用来区分不同场景中交替出现的日志的手段

typedefenum {
EMERG  = 0,
FATAL  = 0,
ALERT  = 100,
CRIT   = 200,
ERROR  = 300,
WARN   = 400,
NOTICE =500,
INFO   = 600,
DEBUG  = 700,
NOTSET =800
}PriorityLevel;  值越低 优先级越高，高于指定优先级被记录

1 不要手动释放Category、Appender和Layout;
2 同一个Appender不要加入多个Category，否则它会被释放多次从而导致程序崩溃;
3 同一个Layout不要附着到多个Appender上，否则也会被释放多次导致程序崩溃;

流程：
1. 创建一个Appender，并指定其包含的Layout；
	log4cpp::OstreamAppender *osAppender = new log4cpp::OstreamAppender("osAppender", &cout);
	osAppender->setLayout(new log4cpp::BasicLayout());
2. 从系统中得到Category的根，将Appender添加到该Category中；
	log4cpp::Category &root = log4cpp::Category::getRoot();
	root.addAppender(osAppender);
3. 设置Category的优先级；
	root.setPriority(log4cpp::Priority::DEBUG);
4. 记录日志；
	root.error("Hello log4cpp in a Error Message");
5. 关闭Category。
	log4cpp::Category::shutdown();

PatternLayout
%c category；
%d 日期；日期可以进一步的设置格式，用花括号包围，例如%d{%H:%M:%S,%l} 或者 %d{%d %m %Y%H:%M:%S,%l}。如果不设置具体日期格式，则如下默认格式被使用“Wed Jan 02 02:03:55 1980”。日期的格式符号与ANSI C函数strftime中的一致。但增加了一个格式符号%l，表示毫秒，占三个十进制位。
%m 消息；
%n 换行符，会根据平台的不同而不同，但对于用户透明；
%p 优先级；
%r 自从layout被创建后的毫秒数；
%R 从1970年1月1日0时开始到目前为止的秒数；
%u 进程开始到目前为止的时钟周期数；
%x NDC。
常用：
log4cpp::PatternLayout* pLayout = new log4cpp::PatternLayout();
pLayout->setConversionPattern("%d: %p %c %x: %m%n");
osAppender->setLayout(pLayout);

Appender：
log4cpp::IdsaAppender		// 发送到IDS或者
log4cpp::FileAppender		// 输出到文件
log4cpp::RollingFileAppender	// 输出到回卷文件，即当文件到达某个大小后回卷
log4cpp::OstreamAppender	// 输出到一个ostream类
log4cpp::RemoteSyslogAppender	// 输出到远程syslog服务器
log4cpp::StringQueueAppender	// 内存队列
log4cpp::SyslogAppender	// 本地syslog
log4cpp::Win32DebugAppender	// 发送到缺省系统调试器
log4cpp::NTEventLogAppender	// 发送到win事件日志

StringQueueAppender：
由于在多线程中 printf会导致IO中断，干扰线程间运行方式，切不易调试，所以需要事先记录错误记录，程序结束依次输出


FileAppender：
一直写文件，直到系统资源耗尽
RollingFileAppender：
到达指定大小，则清除文件内容再写入，清除部分依据备份数量保存

Win32DebugAppender：
向调试器输出写入日志

NTEventLogAppender
向windows的日志写入日志，
windows的计算机管理->系统工具->事件查看器->应用程序

Category：
一般一个应用只使用一个Category
多个可以（注，多个Categor 不能添加同一个Appender
log4cpp::Category& root =log4cpp::Category::getRoot();
log4cpp::Category& sub1 =root.getInstance("sub1");


利用配置文件定制日志
#log4cpp配置文件
#定义Root category的属性
log4cpp.rootCategory=DEBUG, RootLog
 
#定义RootLog属性
log4cpp.appender.RootLog=ConsoleAppender
log4cpp.appender.RootLog.layout=PatternLayout
log4cpp.appender.RootLog.layout.ConversionPattern=%d [%p] -%m%n
 
#定义sample category的属性
log4cpp.category.sample=DEBUG, sample
 
#定义sample属性
log4cpp.appender.sample=FileAppender
log4cpp.appender.sample.fileName=sample.log
log4cpp.appender.sample.layout=PatternLayout
log4cpp.appender.sample.layout.ConversionPattern=%d [%p] -%m%n
 
#定义sample.soncategory的属性
log4cpp.category.sample.son=DEBUG, son
 
#定义son的属性
log4cpp.appender.son=FileAppender
log4cpp.appender.son.fileName=son.log
log4cpp.appender.son.layout=PatternLayout
log4cpp.appender.son.layout.ConversionPattern=%d[%p] - %m%n
 
#定义sample.daughtercategory的属性
log4cpp.category.sample.daughter=DEBUG,daughter
 
#定义daughter属性
log4cpp.appender.daughter=FileAppender
log4cpp.appender.daughter.fileName=daughter.log
log4cpp.appender.daughter.layout=PatternLayout
log4cpp.appender.daughter.layout.ConversionPattern=%d [%p]- %m%n
对应category 和 appender 的配置方式，可以发现
category 是"log4cpp.category." + "categoryname"
category 名字可以用"."分隔，以标识包含关系
appender 是"log4cpp.appender." + "appendername"
appender 名字 不能用 "." 分隔，即是说 appender 是没有包含关系的
读取配置文件要依赖PropertyConfigurator和SimpleConfigurator类

如：
# a simple test config
#
appender root basic console
priority root DEBUG
appender sub1 basic file sub1.log
#appender sub1 basic syslog log4cpptest
priority sub1.sub2 ERROR
appender sub1.sub2 pattern console The message %m at time %d%n
